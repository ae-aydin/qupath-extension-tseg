plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.bytedeco.gradle-javacpp-platform'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

ext.moduleName = 'io.github.qupath.extension.tseg'

base {
    archivesName = rootProject.name
    version = '0.0.1'
    description = 'Tumor Segmentation with YOLO Models'
}

ext.qupathVersion = gradle.ext.qupathVersion
ext.qupathJavaVersion = 17

dependencies {
    shadow "io.github.qupath:qupath-gui-fx:${qupathVersion}"
    shadow libs.slf4j
    shadow libs.qupath.fxtras
    testImplementation "io.github.qupath:qupath-gui-fx:${qupathVersion}"
    testImplementation libs.junit
}

jar {
    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Version": archiveVersion,
                "Automatic-Module-Name": moduleName)
    }
}


configurations.shadow  {
    def runtimeAttributes = configurations.runtimeClasspath.attributes
    runtimeAttributes.keySet().each { key ->
        if (key in [Usage.USAGE_ATTRIBUTE, OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, MachineArchitecture.ARCHITECTURE_ATTRIBUTE])
            attributes.attribute(key as Attribute<Object>, runtimeAttributes.getAttribute(key as Attribute<Object>))
    }
}

processResources {
  from ("${projectDir}/LICENSE") {
    into 'licenses/'
  }
}

tasks.register("copyDependencies", Copy) {
    description "Copy dependencies into the build directory for use elsewhere"
    group "QuPath"

    from configurations.default
    into 'build/libs'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(qupathJavaVersion)
    }
    withSourcesJar()
    withJavadocJar()
}


tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
    def strictJavadoc = findProperty('strictJavadoc')
    if (!strictJavadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

tasks.named('compileJava') {
	options.encoding = 'UTF-8'
}


tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


tasks.named('test') {
    useJUnitPlatform()
}

repositories {

    mavenCentral()

    maven {
        url "https://maven.scijava.org/content/repositories/releases"
    }

    maven {
        url "https://maven.scijava.org/content/repositories/snapshots"
    }

}
